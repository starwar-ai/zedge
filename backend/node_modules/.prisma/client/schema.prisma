// Prisma schema for RBAC System
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// 租户管理 (Tenant Management)
// ============================================================================

model Tenant {
  id          String       @id @default(uuid()) @map("tenant_id") @db.Uuid
  name        String       @unique @db.VarChar(255)
  description String?      @db.Text
  status      TenantStatus @default(ACTIVE)
  adminUserId String?      @map("admin_user_id") @db.Uuid
  vlanId      Int?         @unique @map("vlan_id")
  quotaConfig Json?        @map("quota_config") @db.JsonB
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  createdBy   String?      @map("created_by") @db.Uuid

  // Relations
  users            User[]
  userGroups       UserGroup[]
  instances        Instance[]
  privateDataDisks PrivateDataDisk[]
  vpcs             Vpc[]
  places           Place[]
  creator          User?             @relation("TenantCreator", fields: [createdBy], references: [id])

  @@index([status])
  @@index([createdBy])
  @@map("tenants")
}

enum TenantStatus {
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  SUSPENDED @map("suspended")
}

// ============================================================================
// 用户管理 (User Management)
// ============================================================================

model User {
  id           String     @id @default(uuid()) @map("user_id") @db.Uuid
  username     String     @unique @db.VarChar(255)
  email        String     @unique @db.VarChar(255)
  passwordHash String     @map("password_hash") @db.VarChar(255)
  role         UserRole   @default(USER)
  status       UserStatus @default(ACTIVE)
  tenantId     String?    @map("tenant_id") @db.Uuid
  quotaConfig  Json?      @map("quota_config") @db.JsonB
  lastLoginAt  DateTime?  @map("last_login_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  tenant           Tenant?           @relation(fields: [tenantId], references: [id])
  groupMemberships UserGroupMember[]
  instances        Instance[]
  privateDataDisks PrivateDataDisk[]
  createdTenants   Tenant[]          @relation("TenantCreator")
  vpcs             Vpc[]
  createdVpcs      Vpc[]             @relation("VpcCreator")
  updatedVpcs      Vpc[]             @relation("VpcUpdater")
  createdPlaces    Place[]           @relation("PlaceCreator")
  updatedPlaces    Place[]           @relation("PlaceUpdater")
  createdSubnets   Subnet[]          @relation("SubnetCreator")
  updatedSubnets   Subnet[]          @relation("SubnetUpdater")
  auditLogs        AuditLog[]

  @@index([tenantId])
  @@index([role])
  @@index([status])
  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN        @map("admin") // 系统管理员
  TENANT_ADMIN @map("tenant_admin") // 租户管理员
  OPERATOR     @map("operator") // 运维人员
  USER         @map("user") // 普通用户
}

enum UserStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  LOCKED   @map("locked")
}

// ============================================================================
// 用户组管理 (User Group Management)
// ============================================================================

model UserGroup {
  id            String   @id @default(uuid()) @map("group_id") @db.Uuid
  name          String   @db.VarChar(255)
  description   String?  @db.Text
  tenantId      String   @map("tenant_id") @db.Uuid
  parentGroupId String?  @map("parent_group_id") @db.Uuid
  quotaConfig   Json?    @map("quota_config") @db.JsonB
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentGroup UserGroup?        @relation("GroupHierarchy", fields: [parentGroupId], references: [id])
  childGroups UserGroup[]       @relation("GroupHierarchy")
  members     UserGroupMember[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([parentGroupId])
  @@map("user_groups")
}

model UserGroupMember {
  id       String   @id @default(uuid()) @map("membership_id") @db.Uuid
  groupId  String   @map("group_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  joinedAt DateTime @default(now()) @map("joined_at")
  addedBy  String?  @map("added_by") @db.Uuid

  // Relations
  group UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@map("user_group_members")
}

// ============================================================================
// 权限管理 (Permission Management)
// ============================================================================

model Permission {
  id             String           @id @default(uuid()) @map("permission_id") @db.Uuid
  resourceType   ResourceType     @map("resource_type")
  action         PermissionAction
  permissionName String           @unique @map("permission_name") @db.VarChar(255)
  description    String?          @db.Text
  createdAt      DateTime         @default(now()) @map("created_at")

  // Relations
  rolePermissions RolePermission[]

  @@index([resourceType])
  @@index([action])
  @@map("permissions")
}

enum ResourceType {
  TENANT     @map("tenant")
  USER       @map("user")
  USER_GROUP @map("user_group")
  INSTANCE   @map("instance")
  STORAGE    @map("storage")
  NETWORK    @map("network")
  IMAGE      @map("image")
  SERVER     @map("server")
  EDGE_DC    @map("edge_dc")
  PLACE      @map("place")
}

enum PermissionAction {
  CREATE  @map("create")
  READ    @map("read")
  UPDATE  @map("update")
  DELETE  @map("delete")
  MANAGE  @map("manage")
  EXECUTE @map("execute")
}

model RolePermission {
  id           String   @id @default(uuid()) @map("role_permission_id") @db.Uuid
  role         UserRole
  permissionId String   @map("permission_id") @db.Uuid

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
  @@index([permissionId])
  @@map("role_permissions")
}

// ============================================================================
// 实例管理 (Instance Management) - 简化版用于演示
// ============================================================================

model Instance {
  id        String   @id @default(uuid()) @map("instance_id") @db.Uuid
  name      String   @db.VarChar(255)
  tenantId  String   @map("tenant_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  status    String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([status])
  @@map("instances")
}

// ============================================================================
// 存储管理 (Storage Management) - 简化版用于演示
// ============================================================================

model PrivateDataDisk {
  id        String   @id @default(uuid()) @map("disk_id") @db.Uuid
  name      String   @db.VarChar(255)
  tenantId  String   @map("tenant_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  sizeGb    Int      @map("size_gb")
  status    String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([status])
  @@map("private_data_disks")
}

// ============================================================================
// 网络管理 (Network Management)
// ============================================================================

model Vpc {
  id               String    @id @default(uuid()) @map("vpc_id") @db.Uuid
  name             String    @db.VarChar(255)
  description      String?   @db.Text
  tenantId         String    @map("tenant_id") @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  cidrBlock        String    @map("cidr_block") @db.VarChar(50)
  edgeDataCenterId String?   @map("edge_data_center_id") @db.Uuid
  vlanId           Int?      @map("vlan_id")
  enableDns        Boolean   @default(true) @map("enable_dns")
  dnsServers       Json?     @map("dns_servers") @db.JsonB
  status           VpcStatus @default(ACTIVE)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  createdBy        String?   @map("created_by") @db.Uuid
  updatedBy        String?   @map("updated_by") @db.Uuid

  // Relations
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id])
  subnets Subnet[]
  creator User?    @relation("VpcCreator", fields: [createdBy], references: [id])
  updater User?    @relation("VpcUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([userId])
  @@index([status])
  @@map("vpcs")
}

enum VpcStatus {
  ACTIVE   @map("active")
  DISABLED @map("disabled")
  DELETED  @map("deleted")
}

model Place {
  id          String      @id @default(uuid()) @map("place_id") @db.Uuid
  name        String      @db.VarChar(255)
  description String?     @db.Text
  tenantId    String      @map("tenant_id") @db.Uuid
  subnetId    String?     @unique @map("subnet_id") @db.Uuid
  location    String?     @db.VarChar(255)
  status      PlaceStatus @default(ACTIVE)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  createdBy   String?     @map("created_by") @db.Uuid
  updatedBy   String?     @map("updated_by") @db.Uuid

  // Relations
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subnet  Subnet? @relation(fields: [subnetId], references: [id], onDelete: SetNull)
  creator User?   @relation("PlaceCreator", fields: [createdBy], references: [id])
  updater User?   @relation("PlaceUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([subnetId])
  @@index([status])
  @@map("places")
}

enum PlaceStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  DISABLED @map("disabled")
}

model Subnet {
  id               String       @id @default(uuid()) @map("subnet_id") @db.Uuid
  name             String       @db.VarChar(255)
  vpcId            String       @map("vpc_id") @db.Uuid
  cidrBlock        String       @map("cidr_block") @db.VarChar(50)
  availabilityZone String?      @map("availability_zone") @db.VarChar(100)
  gateway          String?      @db.VarChar(50)
  vlanId           Int?         @map("vlan_id")
  isPublic         Boolean      @default(false) @map("is_public")
  autoAssignIp     Boolean      @default(true) @map("auto_assign_ip")
  status           SubnetStatus @default(ACTIVE)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  createdBy        String?      @map("created_by") @db.Uuid
  updatedBy        String?      @map("updated_by") @db.Uuid

  // Relations
  vpc     Vpc    @relation(fields: [vpcId], references: [id], onDelete: Cascade)
  place   Place?
  creator User?  @relation("SubnetCreator", fields: [createdBy], references: [id])
  updater User?  @relation("SubnetUpdater", fields: [updatedBy], references: [id])

  @@unique([vpcId, cidrBlock])
  @@index([vpcId])
  @@index([status])
  @@map("subnets")
}

enum SubnetStatus {
  ACTIVE   @map("active")
  DISABLED @map("disabled")
}

// ============================================================================
// 审计日志 (Audit Logs)
// ============================================================================

model AuditLog {
  id           String   @id @default(uuid()) @map("log_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  action       String   @db.VarChar(100)
  resourceType String   @map("resource_type") @db.VarChar(100)
  resourceId   String?  @map("resource_id") @db.Uuid
  details      Json?    @db.JsonB
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  status       String   @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([createdAt])
  @@map("audit_logs")
}
