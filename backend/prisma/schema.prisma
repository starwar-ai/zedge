// Prisma schema for RBAC System
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// 租户管理 (Tenant Management)
// ============================================================================

model Tenant {
  id              String   @id @default(uuid()) @map("tenant_id") @db.Uuid
  name            String   @unique @db.VarChar(255)
  description     String?  @db.Text
  status          TenantStatus @default(ACTIVE)
  adminUserId     String?  @map("admin_user_id") @db.Uuid
  vlanId          Int?     @unique @map("vlan_id")
  quotaConfig     Json?    @map("quota_config") @db.JsonB
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid

  // Relations
  users           User[]
  userGroups      UserGroup[]
  instances       Instance[]
  privateDataDisks PrivateDataDisk[]
  vpcs            Vpc[]
  places          Place[]
  templates       Template[]
  instanceSets    InstanceSet[]
  images          Image[]
  creator         User?    @relation("TenantCreator", fields: [createdBy], references: [id])

  @@map("tenants")
  @@index([status])
  @@index([createdBy])
}

enum TenantStatus {
  ACTIVE      @map("active")
  INACTIVE    @map("inactive")
  SUSPENDED   @map("suspended")
}

// ============================================================================
// 用户管理 (User Management)
// ============================================================================

model User {
  id              String   @id @default(uuid()) @map("user_id") @db.Uuid
  username        String   @unique @db.VarChar(255)
  email           String   @unique @db.VarChar(255)
  passwordHash    String   @map("password_hash") @db.VarChar(255)
  role            UserRole @default(USER)
  status          UserStatus @default(ACTIVE)
  tenantId        String?  @map("tenant_id") @db.Uuid
  quotaConfig     Json?    @map("quota_config") @db.JsonB
  lastLoginAt     DateTime? @map("last_login_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant?  @relation(fields: [tenantId], references: [id])
  groupMemberships UserGroupMember[]
  instances       Instance[]
  privateDataDisks PrivateDataDisk[]
  createdTenants  Tenant[] @relation("TenantCreator")
  vpcs            Vpc[]
  createdVpcs     Vpc[]   @relation("VpcCreator")
  updatedVpcs      Vpc[]   @relation("VpcUpdater")
  createdPlaces   Place[] @relation("PlaceCreator")
  updatedPlaces   Place[] @relation("PlaceUpdater")
  createdSubnets  Subnet[] @relation("SubnetCreator")
  updatedSubnets  Subnet[] @relation("SubnetUpdater")
  auditLogs       AuditLog[]
  createdTemplates Template[] @relation("TemplateOwner")
  createdTemplateVersions TemplateVersion[] @relation("TemplateVersionCreator")
  ownedInstanceSets InstanceSet[] @relation("InstanceSetOwner")
  createdInstanceSets InstanceSet[] @relation("InstanceSetCreator")
  updatedInstanceSets InstanceSet[] @relation("InstanceSetUpdater")
  addedInstanceSetMembers InstanceSetMember[] @relation("InstanceSetMemberAdder")
  assignedCloudBoxes CloudBox[] @relation("CloudBoxAssignedUser")
  ownedImages Image[] @relation("ImageOwner")
  createdImageVersions ImageVersion[] @relation("ImageVersionCreator")
  createdPrivateDataDisks PrivateDataDisk[] @relation("PrivateDataDiskCreator")
  updatedPrivateDataDisks PrivateDataDisk[] @relation("PrivateDataDiskUpdater")
  diskAttachments InstancePrivateDataDiskAttachment[] @relation("DiskAttachmentAttacher")

  @@map("users")
  @@index([tenantId])
  @@index([role])
  @@index([status])
  @@index([email])
}

enum UserRole {
  ADMIN         @map("admin")             // 系统管理员
  TENANT_ADMIN  @map("tenant_admin")      // 租户管理员
  OPERATOR      @map("operator")          // 运维人员
  USER          @map("user")              // 普通用户
}

enum UserStatus {
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  LOCKED    @map("locked")
}

// ============================================================================
// 用户组管理 (User Group Management)
// ============================================================================

model UserGroup {
  id              String   @id @default(uuid()) @map("group_id") @db.Uuid
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  tenantId        String   @map("tenant_id") @db.Uuid
  parentGroupId   String?  @map("parent_group_id") @db.Uuid
  quotaConfig     Json?    @map("quota_config") @db.JsonB
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  parentGroup     UserGroup? @relation("GroupHierarchy", fields: [parentGroupId], references: [id])
  childGroups     UserGroup[] @relation("GroupHierarchy")
  members         UserGroupMember[]
  instanceSets    InstanceSet[]

  @@unique([tenantId, name])
  @@map("user_groups")
  @@index([tenantId])
  @@index([parentGroupId])
}

model UserGroupMember {
  id              String   @id @default(uuid()) @map("membership_id") @db.Uuid
  groupId         String   @map("group_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  joinedAt        DateTime @default(now()) @map("joined_at")
  addedBy         String?  @map("added_by") @db.Uuid

  // Relations
  group           UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("user_group_members")
  @@index([groupId])
  @@index([userId])
}

// ============================================================================
// 权限管理 (Permission Management)
// ============================================================================

model Permission {
  id              String   @id @default(uuid()) @map("permission_id") @db.Uuid
  resourceType    ResourceType @map("resource_type")
  action          PermissionAction
  permissionName  String   @unique @map("permission_name") @db.VarChar(255)
  description     String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
  @@index([resourceType])
  @@index([action])
}

enum ResourceType {
  TENANT        @map("tenant")
  USER          @map("user")
  USER_GROUP    @map("user_group")
  INSTANCE      @map("instance")
  INSTANCE_SET  @map("instance_set")
  STORAGE       @map("storage")
  NETWORK       @map("network")
  IMAGE         @map("image")
  SERVER        @map("server")
  EDGE_DC       @map("edge_dc")
  PLACE         @map("place")
  TEMPLATE      @map("template")
}

enum PermissionAction {
  CREATE    @map("create")
  READ      @map("read")
  UPDATE    @map("update")
  DELETE    @map("delete")
  MANAGE    @map("manage")
  EXECUTE   @map("execute")
}

model RolePermission {
  id              String   @id @default(uuid()) @map("role_permission_id") @db.Uuid
  role            UserRole
  permissionId    String   @map("permission_id") @db.Uuid

  // Relations
  permission      Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@map("role_permissions")
  @@index([role])
  @@index([permissionId])
}

// ============================================================================
// 实例管理 (Instance Management) - 简化版用于演示
// ============================================================================

model Instance {
  id              String   @id @default(uuid()) @map("instance_id") @db.Uuid
  name            String   @db.VarChar(255)
  tenantId        String   @map("tenant_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  templateId      String?  @map("template_id") @db.Uuid
  status          String   @db.VarChar(50)
  config          Json?    @db.JsonB
  // 资源分配相关字段（仅在运行时使用）
  rentalMode      RentalMode? @map("rental_mode")
  resourcePoolId  String?  @map("resource_pool_id") @db.Uuid
  computeMachineId String? @map("compute_machine_id") @db.Uuid
  virtualMachineId String? @unique @map("virtual_machine_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  template        Template? @relation(fields: [templateId], references: [id])
  resourcePool    ResourcePool? @relation(fields: [resourcePoolId], references: [id])
  computeMachine  ComputeMachine? @relation(fields: [computeMachineId], references: [id])
  virtualMachine  VirtualMachine? @relation("InstanceVirtualMachine")
  instanceSetMembers InstanceSetMember[]
  temporaryCloudBoxes CloudBox[] @relation("CloudBoxTemporaryInstance")
  privateDataDiskAttachments InstancePrivateDataDiskAttachment[]

  @@map("instances")
  @@index([tenantId])
  @@index([userId])
  @@index([status])
  @@index([templateId])
  @@index([resourcePoolId])
  @@index([computeMachineId])
  @@index([rentalMode])
}

// ============================================================================
// 存储管理 (Storage Management)
// ============================================================================

model PrivateDataDisk {
  id                  String                @id @default(uuid()) @map("disk_id") @db.Uuid
  name                String                @db.VarChar(255)
  tenantId            String                @map("tenant_id") @db.Uuid
  userId              String                @map("user_id") @db.Uuid
  sizeGb              Int                  @map("size_gb")
  diskType            PrivateDataDiskType  @default(STANDARD) @map("disk_type")
  status              PrivateDataDiskStatus @default(AVAILABLE)
  shareMode           ShareMode            @default(EXCLUSIVE) @map("share_mode")
  maxAttachments      Int                  @default(1) @map("max_attachments")
  rbdImageName        String               @unique @map("rbd_image_name") @db.VarChar(255)
  rbdPool             String               @default("private-data-disks") @map("rbd_pool") @db.VarChar(100)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  createdBy           String?              @map("created_by") @db.Uuid
  updatedBy           String?              @map("updated_by") @db.Uuid

  // Relations
  tenant              Tenant                @relation(fields: [tenantId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  attachments         InstancePrivateDataDiskAttachment[]
  creator             User?                 @relation("PrivateDataDiskCreator", fields: [createdBy], references: [id])
  updater             User?                @relation("PrivateDataDiskUpdater", fields: [updatedBy], references: [id])

  @@map("private_data_disks")
  @@index([tenantId])
  @@index([userId])
  @@index([status])
  @@index([diskType])
  @@index([shareMode])
  @@index([rbdImageName])
}

enum PrivateDataDiskStatus {
  AVAILABLE   @map("available")
  ATTACHED    @map("attached")
  CREATING    @map("creating")
  DELETING    @map("deleting")
  ERROR       @map("error")
}

enum PrivateDataDiskType {
  STANDARD    @map("standard")
  SSD         @map("ssd")
  NVME        @map("nvme")
}

enum ShareMode {
  EXCLUSIVE   @map("exclusive")
  SHARED      @map("shared")
}

model InstancePrivateDataDiskAttachment {
  id                  String              @id @default(uuid()) @map("attachment_id") @db.Uuid
  instanceId          String              @map("instance_id") @db.Uuid
  diskId              String              @map("disk_id") @db.Uuid
  mountPath           String              @map("mount_path") @db.VarChar(255)
  mountMode           MountMode           @default(RW) @map("mount_mode")
  attachedAt          DateTime            @default(now()) @map("attached_at")
  attachedBy          String              @map("attached_by") @db.Uuid
  status              AttachmentStatus    @default(ATTACHED)

  // Relations
  instance            Instance            @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  disk                PrivateDataDisk     @relation(fields: [diskId], references: [id], onDelete: Restrict)
  attacher            User                @relation("DiskAttachmentAttacher", fields: [attachedBy], references: [id])

  @@unique([instanceId, diskId])
  @@map("instance_private_data_disk_attachments")
  @@index([instanceId])
  @@index([diskId])
  @@index([status])
  @@index([attachedAt])
}

enum MountMode {
  RW          @map("rw")
  RO          @map("ro")
}

enum AttachmentStatus {
  ATTACHING   @map("attaching")
  ATTACHED    @map("attached")
  DETACHING   @map("detaching")
  FAILED      @map("failed")
}

// ============================================================================
// 网络管理 (Network Management)
// ============================================================================

model Vpc {
  id              String   @id @default(uuid()) @map("vpc_id") @db.Uuid
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  tenantId        String   @map("tenant_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  cidrBlock       String   @map("cidr_block") @db.VarChar(50)
  edgeDataCenterId String? @map("edge_data_center_id") @db.Uuid
  vlanId          Int?     @map("vlan_id")
  enableDns       Boolean  @default(true) @map("enable_dns")
  dnsServers      Json?    @map("dns_servers") @db.JsonB
  status          VpcStatus @default(ACTIVE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid
  updatedBy       String?  @map("updated_by") @db.Uuid

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id])
  edgeDataCenter  EdgeDataCenter? @relation(fields: [edgeDataCenterId], references: [id], onDelete: SetNull)
  subnets         Subnet[]
  creator         User?    @relation("VpcCreator", fields: [createdBy], references: [id])
  updater         User?    @relation("VpcUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@map("vpcs")
  @@index([tenantId])
  @@index([userId])
  @@index([status])
}

enum VpcStatus {
  ACTIVE      @map("active")
  DISABLED    @map("disabled")
  DELETED     @map("deleted")
}

model Place {
  id              String   @id @default(uuid()) @map("place_id") @db.Uuid
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  tenantId        String   @map("tenant_id") @db.Uuid
  subnetId        String?  @unique @map("subnet_id") @db.Uuid
  location        String?  @db.VarChar(255)
  status          PlaceStatus @default(ACTIVE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid
  updatedBy       String?  @map("updated_by") @db.Uuid

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subnet          Subnet?  @relation(fields: [subnetId], references: [id], onDelete: SetNull)
  creator         User?    @relation("PlaceCreator", fields: [createdBy], references: [id])
  updater         User?    @relation("PlaceUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@map("places")
  @@index([tenantId])
  @@index([subnetId])
  @@index([status])
}

enum PlaceStatus {
  ACTIVE      @map("active")
  INACTIVE    @map("inactive")
  DISABLED    @map("disabled")
}

model Subnet {
  id              String   @id @default(uuid()) @map("subnet_id") @db.Uuid
  name            String   @db.VarChar(255)
  vpcId           String   @map("vpc_id") @db.Uuid
  cidrBlock       String   @map("cidr_block") @db.VarChar(50)
  availabilityZone String? @map("availability_zone") @db.VarChar(100)
  gateway         String?  @db.VarChar(50)
  vlanId          Int?     @map("vlan_id")
  isPublic        Boolean  @default(false) @map("is_public")
  autoAssignIp    Boolean  @default(true) @map("auto_assign_ip")
  status          SubnetStatus @default(ACTIVE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid
  updatedBy       String?  @map("updated_by") @db.Uuid

  // Relations
  vpc             Vpc      @relation(fields: [vpcId], references: [id], onDelete: Cascade)
  place           Place?
  creator         User?    @relation("SubnetCreator", fields: [createdBy], references: [id])
  updater         User?    @relation("SubnetUpdater", fields: [updatedBy], references: [id])

  @@unique([vpcId, cidrBlock])
  @@map("subnets")
  @@index([vpcId])
  @@index([status])
}

enum SubnetStatus {
  ACTIVE      @map("active")
  DISABLED    @map("disabled")
}

// ============================================================================
// 审计日志 (Audit Logs)
// ============================================================================

model AuditLog {
  id              String   @id @default(uuid()) @map("log_id") @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  action          String   @db.VarChar(100)
  resourceType    String   @map("resource_type") @db.VarChar(100)
  resourceId      String?  @map("resource_id") @db.Uuid
  details         Json?    @db.JsonB
  ipAddress       String?  @map("ip_address") @db.VarChar(45)
  userAgent       String?  @map("user_agent") @db.Text
  status          String   @db.VarChar(50)
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resourceType])
  @@index([createdAt])
}

// ============================================================================
// 模板管理 (Template Management)
// ============================================================================

model Template {
  id                  String         @id @default(uuid()) @map("template_id") @db.Uuid
  name                String         @db.VarChar(255)
  description         String?        @db.Text
  useCase             TemplateUseCase? @map("use_case")
  templateType        TemplateType  @default(INSTANCE) @map("template_type")
  baseImageId         String?       @map("base_image_id") @db.Uuid
  defaultCpuCores     Int           @map("default_cpu_cores")
  defaultMemoryGb     Int           @map("default_memory_gb")
  defaultStorageGb    Int           @map("default_storage_gb")
  defaultGpuCount     Int?          @default(0) @map("default_gpu_count")
  defaultBandwidthGbps Float?       @map("default_bandwidth_gbps")
  networkConfig       Json?         @map("network_config") @db.JsonB
  userData            String?       @map("user_data") @db.Text
  tags                Json?         @db.JsonB
  visibility          TemplateVisibility @default(PRIVATE)
  ownerId             String        @map("owner_id") @db.Uuid
  tenantId            String?       @map("tenant_id") @db.Uuid
  version             String        @default("v1.0.0") @db.VarChar(50)
  status              TemplateStatus @default(ACTIVE)
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  
  // Relations
  owner               User          @relation("TemplateOwner", fields: [ownerId], references: [id])
  tenant              Tenant?       @relation(fields: [tenantId], references: [id])
  versions            TemplateVersion[]
  instances           Instance[]
  
  @@unique([tenantId, name])
  @@map("templates")
  @@index([ownerId])
  @@index([tenantId])
  @@index([status])
  @@index([visibility])
  @@index([templateType])
}

enum TemplateUseCase {
  AI_APPLICATION          @map("ai_application")
  GRAPHICS_RENDERING      @map("graphics_rendering")
  GAMING_HIGH_PERFORMANCE @map("gaming_high_performance")
  LIGHTWEIGHT_OFFICE      @map("lightweight_office")
  WEB_SERVER              @map("web_server")
  DATABASE                @map("database")
  DEVELOPMENT             @map("development")
  GENERAL                 @map("general")
}

enum TemplateType {
  INSTANCE       @map("instance")
  INSTANCE_SET   @map("instance_set")
}

enum TemplateVisibility {
  PUBLIC         @map("public")
  PRIVATE        @map("private")
  GROUP_SPECIFIC @map("group_specific")
}

enum TemplateStatus {
  ACTIVE     @map("active")
  DEPRECATED @map("deprecated")
  ARCHIVED   @map("archived")
}

model TemplateVersion {
  id              String   @id @default(uuid()) @map("version_id") @db.Uuid
  templateId      String   @map("template_id") @db.Uuid
  versionNumber   String   @map("version_number") @db.VarChar(50)
  isLatest        Boolean  @default(false) @map("is_latest")
  configSnapshot  Json     @map("config_snapshot") @db.JsonB
  changelog        String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String   @map("created_by") @db.Uuid
  
  // Relations
  template        Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  creator         User     @relation("TemplateVersionCreator", fields: [createdBy], references: [id])
  
  @@unique([templateId, versionNumber])
  @@map("template_versions")
  @@index([templateId])
  @@index([isLatest])
}

// ============================================================================
// 实例集管理 (Instance Set Management)
// ============================================================================

model InstanceSet {
  id              String   @id @default(uuid()) @map("set_id") @db.Uuid
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  ownerId         String   @map("owner_id") @db.Uuid
  tenantId        String   @map("tenant_id") @db.Uuid
  userGroupId     String?  @map("user_group_id") @db.Uuid
  setType         InstanceSetType @default(CUSTOM) @map("set_type")
  status          InstanceSetStatus @default(ACTIVE)
  tags            Json?    @db.JsonB
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid
  updatedBy       String?  @map("updated_by") @db.Uuid

  // Relations
  owner           User     @relation("InstanceSetOwner", fields: [ownerId], references: [id])
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userGroup       UserGroup? @relation(fields: [userGroupId], references: [id], onDelete: SetNull)
  members         InstanceSetMember[]
  creator         User?    @relation("InstanceSetCreator", fields: [createdBy], references: [id])
  updater         User?    @relation("InstanceSetUpdater", fields: [updatedBy], references: [id])

  @@unique([tenantId, name])
  @@map("instance_sets")
  @@index([tenantId])
  @@index([ownerId])
  @@index([userGroupId])
  @@index([setType])
  @@index([status])
}

enum InstanceSetType {
  PROJECT      @map("project")
  DEPARTMENT   @map("department")
  APPLICATION  @map("application")
  TRAINING     @map("training")
  CUSTOM       @map("custom")
}

enum InstanceSetStatus {
  ACTIVE     @map("active")
  ARCHIVED   @map("archived")
  DELETED    @map("deleted")
}

model InstanceSetMember {
  id              String   @id @default(uuid()) @map("membership_id") @db.Uuid
  setId           String   @map("set_id") @db.Uuid
  instanceId      String   @map("instance_id") @db.Uuid
  role            String   @db.VarChar(50)
  joinedAt        DateTime @default(now()) @map("joined_at")
  addedBy         String?  @map("added_by") @db.Uuid

  // Relations
  instanceSet     InstanceSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  instance        Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  adder           User?    @relation("InstanceSetMemberAdder", fields: [addedBy], references: [id])

  @@unique([setId, instanceId])
  @@map("instance_set_members")
  @@index([setId])
  @@index([instanceId])
  @@index([role])
}

// ============================================================================
// 云盒管理 (Cloud Box Management)
// ============================================================================

model CloudBox {
  id                      String   @id @default(uuid()) @map("box_id") @db.Uuid
  name                    String   @db.VarChar(255)
  serialNumber            String   @unique @map("serial_number") @db.VarChar(255)
  networkId               String?  @map("network_id") @db.Uuid
  status                  CloudBoxStatus @default(OFFLINE)
  ipAddress               String?  @map("ip_address") @db.VarChar(50)
  macAddress              String?  @map("mac_address") @db.VarChar(50)
  firmwareVersion         String?  @map("firmware_version") @db.VarChar(50)
  lastBootTime            DateTime? @map("last_boot_time")
  isDisabled              Boolean  @default(false) @map("is_disabled")
  edgeDataCenterId        String?  @map("edge_data_center_id") @db.Uuid
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  lastHeartbeat           DateTime? @map("last_heartbeat")
  
  // 临时绑定相关字段
  temporaryInstanceId     String?  @map("temporary_instance_id") @db.Uuid
  temporaryBindExpiresAt  DateTime? @map("temporary_bind_expires_at")
  
  // 扩展属性 (JSON)
  model                   String?  @db.VarChar(255)
  manufacturer            String?  @db.VarChar(255)
  hardwareConfig          Json?    @map("hardware_config") @db.JsonB
  location                String?  @db.VarChar(255)
  assignedUserId          String?  @map("assigned_user_id") @db.Uuid
  tags                    Json?    @db.JsonB
  
  // 网络配置 (JSON)
  networkMode             String?  @map("network_mode") @db.VarChar(50)
  gateway                 String?  @db.VarChar(50)
  dnsServers              Json?    @map("dns_servers") @db.JsonB
  subnetMask              String?  @map("subnet_mask") @db.VarChar(50)
  
  // 监控指标 (JSON)
  cpuUsagePercent         Float?   @map("cpu_usage_percent")
  memoryUsagePercent      Float?   @map("memory_usage_percent")
  diskUsagePercent        Float?   @map("disk_usage_percent")
  temperature             Float?
  uptimeSeconds           Int?     @map("uptime_seconds")
  
  // Relations
  edgeDataCenter          EdgeDataCenter? @relation(fields: [edgeDataCenterId], references: [id], onDelete: SetNull)
  temporaryInstance       Instance? @relation("CloudBoxTemporaryInstance", fields: [temporaryInstanceId], references: [id], onDelete: SetNull)
  assignedUser            User?    @relation("CloudBoxAssignedUser", fields: [assignedUserId], references: [id], onDelete: SetNull)
  
  @@map("cloud_boxes")
  @@index([serialNumber])
  @@index([status])
  @@index([edgeDataCenterId])
  @@index([assignedUserId])
  @@index([temporaryInstanceId])
  @@index([temporaryBindExpiresAt])
}

enum CloudBoxStatus {
  ONLINE          @map("online")
  OFFLINE         @map("offline")
  INITIALIZING    @map("initializing")
  MAINTENANCE     @map("maintenance")
  ERROR           @map("error")
}

// ============================================================================
// 边缘机房管理 (Edge Data Center Management)
// ============================================================================

model EdgeDataCenter {
  id                  String   @id @default(uuid()) @map("edge_data_center_id") @db.Uuid
  name                String   @unique @db.VarChar(255)
  location            String?  @db.VarChar(255)
  status              EdgeDataCenterStatus @default(OFFLINE)
  // 网络配置 (JSON)
  networkConfig       Json?    @map("network_config") @db.JsonB
  // 资源统计（从关联的算力机聚合计算）
  totalCpuCores      Int      @default(0) @map("total_cpu_cores")
  totalMemoryGb      Int      @default(0) @map("total_memory_gb")
  totalStorageGb     Int      @default(0) @map("total_storage_gb")
  totalGpuCount      Int      @default(0) @map("total_gpu_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relations
  resourcePools       ResourcePool[]
  computeMachines     ComputeMachine[]
  cloudBoxes          CloudBox[]
  vpcs                Vpc[]
  
  @@map("edge_data_centers")
  @@index([status])
}

enum EdgeDataCenterStatus {
  ACTIVE      @map("active")
  OFFLINE     @map("offline")
  MAINTENANCE @map("maintenance")
}

// ============================================================================
// 资源池管理 (Resource Pool Management)
// ============================================================================

model ResourcePool {
  id                  String   @id @default(uuid()) @map("pool_id") @db.Uuid
  name                String   @db.VarChar(255)
  description         String?  @db.Text
  edgeDataCenterId   String   @map("edge_data_center_id") @db.Uuid
  poolType            ResourcePoolType @default(COMPUTE) @map("pool_type")
  schedulingPolicy    String   @default("load_balance") @map("scheduling_policy") @db.VarChar(50)
  status              ResourcePoolStatus @default(ACTIVE)
  // 资源统计（从关联的算力机聚合计算）
  totalCpuCores       Int      @default(0) @map("total_cpu_cores")
  totalMemoryGb       Int      @default(0) @map("total_memory_gb")
  totalStorageGb      Int      @default(0) @map("total_storage_gb")
  totalGpuCount       Int      @default(0) @map("total_gpu_count")
  allocatedCpuCores   Int      @default(0) @map("allocated_cpu_cores")
  allocatedMemoryGb   Int      @default(0) @map("allocated_memory_gb")
  allocatedStorageGb  Int      @default(0) @map("allocated_storage_gb")
  allocatedGpuCount   Int      @default(0) @map("allocated_gpu_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relations
  edgeDataCenter      EdgeDataCenter @relation(fields: [edgeDataCenterId], references: [id], onDelete: Cascade)
  computeMachines     ComputeMachine[]
  instances           Instance[]
  
  @@unique([edgeDataCenterId, name])
  @@map("resource_pools")
  @@index([edgeDataCenterId])
  @@index([status])
  @@index([poolType])
}

enum ResourcePoolType {
  COMPUTE    @map("compute")
  STORAGE    @map("storage")
  IP_ADDRESS @map("ip_address")
}

enum ResourcePoolStatus {
  ACTIVE      @map("active")
  MAINTENANCE @map("maintenance")
  DISABLED    @map("disabled")
}

// ============================================================================
// 算力机管理 (Compute Machine Management)
// ============================================================================

model ComputeMachine {
  id                  String   @id @default(uuid()) @map("machine_id") @db.Uuid
  hostname            String   @db.VarChar(255)
  name                String   @db.VarChar(255)
  edgeDataCenterId   String   @map("edge_data_center_id") @db.Uuid
  resourcePoolId      String   @map("resource_pool_id") @db.Uuid
  machineType         ComputeMachineType @default(CPU_SERVER) @map("machine_type")
  rentalMode          RentalMode @default(SHARED) @map("rental_mode")
  hypervisorType      HypervisorType @map("hypervisor_type")
  // 硬件规格
  cpuCores            Int      @map("cpu_cores")
  memoryGb            Int      @map("memory_gb")
  storageGb           Int      @map("storage_gb")
  gpuCount            Int?     @default(0) @map("gpu_count")
  gpuModel            String?  @map("gpu_model") @db.VarChar(255)
  // 网络配置
  managementIp        String   @map("management_ip") @db.VarChar(50)
  businessIp         String?  @map("business_ip") @db.VarChar(50)
  // 资源分配跟踪
  allocatedCpuCores   Int      @default(0) @map("allocated_cpu_cores")
  allocatedMemoryGb   Int      @default(0) @map("allocated_memory_gb")
  allocatedStorageGb  Int      @default(0) @map("allocated_storage_gb")
  allocatedGpuCount   Int      @default(0) @map("allocated_gpu_count")
  // 状态
  status              ComputeMachineStatus @default(OFFLINE)
  healthStatus        HealthStatus @default(HEALTHY) @map("health_status")
  // 连接信息
  connectionConfig    Json?    @map("connection_config") @db.JsonB
  // 元数据
  tags                Json?    @db.JsonB
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  lastHeartbeat       DateTime? @map("last_heartbeat")
  
  // Relations
  edgeDataCenter      EdgeDataCenter @relation(fields: [edgeDataCenterId], references: [id], onDelete: Cascade)
  resourcePool        ResourcePool @relation(fields: [resourcePoolId], references: [id], onDelete: Restrict)
  virtualMachines     VirtualMachine[]
  instances           Instance[]
  
  @@unique([edgeDataCenterId, managementIp])
  @@unique([edgeDataCenterId, businessIp])
  @@map("compute_machines")
  @@index([edgeDataCenterId])
  @@index([resourcePoolId])
  @@index([status])
  @@index([rentalMode])
  @@index([machineType])
}

enum ComputeMachineType {
  CPU_SERVER  @map("cpu_server")
  PC_FARM     @map("pc_farm")
  GPU_SERVER  @map("gpu_server")
}

enum RentalMode {
  EXCLUSIVE   @map("exclusive")
  SHARED      @map("shared")
}

enum HypervisorType {
  KVM         @map("kvm")
  VMWARE      @map("vmware")
  HYPER_V     @map("hyper_v")
}

enum ComputeMachineStatus {
  ACTIVE          @map("active")
  MAINTENANCE     @map("maintenance")
  OFFLINE         @map("offline")
  DECOMMISSIONING @map("decommissioning")
}

enum HealthStatus {
  HEALTHY     @map("healthy")
  WARNING     @map("warning")
  CRITICAL    @map("critical")
}

// ============================================================================
// 虚拟机管理 (Virtual Machine Management)
// ============================================================================

model VirtualMachine {
  id                  String   @id @default(uuid()) @map("vm_id") @db.Uuid
  computeMachineId    String   @map("compute_machine_id") @db.Uuid
  instanceId          String   @unique @map("instance_id") @db.Uuid
  vmUuid              String?  @unique @map("vm_uuid") @db.VarChar(255)
  vmName              String   @map("vm_name") @db.VarChar(255)
  // 资源分配
  cpuCores            Int      @map("cpu_cores")
  memoryGb            Int      @map("memory_gb")
  storageGb           Int      @map("storage_gb")
  gpuCount            Int?     @default(0) @map("gpu_count")
  // 状态
  status              VirtualMachineStatus @default(CREATING)
  // 网络配置
  ipAddress           String?  @map("ip_address") @db.VarChar(50)
  macAddress          String?  @map("mac_address") @db.VarChar(50)
  // 元数据
  config              Json?    @db.JsonB
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relations
  computeMachine      ComputeMachine @relation(fields: [computeMachineId], references: [id], onDelete: Restrict)
  instance            Instance @relation("InstanceVirtualMachine", fields: [instanceId], references: [id], onDelete: Cascade)
  
  @@map("virtual_machines")
  @@index([computeMachineId])
  @@index([instanceId])
  @@index([status])
}

enum VirtualMachineStatus {
  CREATING    @map("creating")
  STARTING   @map("starting")
  RUNNING    @map("running")
  STOPPING   @map("stopping")
  STOPPED    @map("stopped")
  RESTARTING @map("restarting")
  ERROR      @map("error")
  DELETED    @map("deleted")
}

// ============================================================================
// 镜像管理 (Image Management)
// ============================================================================

model Image {
  id              String   @id @default(uuid()) @map("image_id") @db.Uuid
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  imageType       ImageType @default(OS_BASE) @map("image_type")
  baseOs          String?  @map("base_os") @db.VarChar(100)
  osVersion       String?  @map("os_version") @db.VarChar(100)
  architecture    String?  @db.VarChar(50)
  sizeGb          Decimal? @map("size_gb") @db.Decimal(10, 2)
  minCpuCores     Int?     @map("min_cpu_cores")
  minMemoryGb     Int?     @map("min_memory_gb")
  minStorageGb    Int?     @map("min_storage_gb")
  recommendedCpuCores   Int?  @map("recommended_cpu_cores")
  recommendedMemoryGb   Int?  @map("recommended_memory_gb")
  visibility      ImageVisibility @default(PRIVATE)
  status          ImageStatus @default(ACTIVE)
  fileServerId    String?  @map("file_server_id") @db.Uuid
  filePath        String?  @map("file_path") @db.VarChar(500)
  checksumMd5     String?  @map("checksum_md5") @db.VarChar(32)
  ownerId         String   @map("owner_id") @db.Uuid
  tenantId        String?  @map("tenant_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  owner           User     @relation("ImageOwner", fields: [ownerId], references: [id])
  tenant          Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  versions        ImageVersion[]
  tags            ImageTag[]

  @@unique([tenantId, name])
  @@map("images")
  @@index([ownerId])
  @@index([tenantId])
  @@index([status])
  @@index([visibility])
  @@index([imageType])
}

enum ImageType {
  OS_BASE            @map("os_base")
  APPLICATION_LAYER  @map("application_layer")
  CUSTOM             @map("custom")
}

enum ImageVisibility {
  PUBLIC          @map("public")
  PRIVATE         @map("private")
  GROUP_SPECIFIC  @map("group_specific")
}

enum ImageStatus {
  ACTIVE      @map("active")
  DEPRECATED  @map("deprecated")
  ARCHIVED    @map("archived")
}

model ImageVersion {
  id                String   @id @default(uuid()) @map("version_id") @db.Uuid
  imageId            String   @map("image_id") @db.Uuid
  versionNumber      String   @map("version_number") @db.VarChar(20)
  versionName        String?  @map("version_name") @db.VarChar(100)
  isLatest           Boolean  @default(false) @map("is_latest")
  isDefault          Boolean  @default(false) @map("is_default")
  parentVersionId    String?  @map("parent_version_id") @db.Uuid
  sizeGb             Decimal? @map("size_gb") @db.Decimal(10, 2)
  filePath           String?  @map("file_path") @db.VarChar(500)
  checksumMd5        String?  @map("checksum_md5") @db.VarChar(32)
  releaseNotes       String?  @map("release_notes") @db.Text
  status             ImageVersionStatus @default(ACTIVE)
  createdAt          DateTime @default(now()) @map("created_at")
  createdBy          String   @map("created_by") @db.Uuid

  // Relations
  image              Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  parentVersion      ImageVersion? @relation("ImageVersionParent", fields: [parentVersionId], references: [id])
  childVersions      ImageVersion[] @relation("ImageVersionParent")
  creator            User     @relation("ImageVersionCreator", fields: [createdBy], references: [id])
  tags               ImageTag[]

  @@unique([imageId, versionNumber])
  @@map("image_versions")
  @@index([imageId])
  @@index([status])
  @@index([isLatest])
  @@index([isDefault])
}

enum ImageVersionStatus {
  ACTIVE      @map("active")
  DEPRECATED  @map("deprecated")
  ARCHIVED    @map("archived")
}

model ImageTag {
  id              String   @id @default(uuid()) @map("tag_id") @db.Uuid
  imageId         String   @map("image_id") @db.Uuid
  versionId       String   @map("version_id") @db.Uuid
  tagName         String   @map("tag_name") @db.VarChar(50)
  isImmutable     Boolean  @default(false) @map("is_immutable")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  image           Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  version         ImageVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([imageId, tagName])
  @@map("image_tags")
  @@index([imageId])
  @@index([versionId])
  @@index([tagName])
}
